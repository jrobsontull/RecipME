import { ObjectId } from "mongodb";
import RecipesDAO from "../dao/recipesDAO.js";

export default class RecipesController {
    static async apiGetRecipes(req, res, next) {
        const recipesPerPage = req.query.recipesPerPage ? parseInt(req.query.recipesPerPage, 10) : 10
        const page = req.query.page ? parseInt(req.query.page, 10) : 0

        let filters = {}
        if (req.query.name) {
            filters.name = req.query.name
        }

        const { recipesList, totalNumRecipes } = await RecipesDAO.getRecipes({
            filters,
            page,
            recipesPerPage,
        })

        let response = {
            recipes: recipesList,
            page: page,
            filters: filters,
            entries_per_page: recipesPerPage,
            total_results: totalNumRecipes,
        }
        res.json(response)
    }

    static async apiPostRecipe(req, res, next) {
        /* ObjectID generated by default on POST */
        const userId = req.body.user_id
        const date = new Date()
        const name = req.body.name
        const serves = req.body.serves
        const cookTime = req.body.cook_time
        const ingredients = req.body.ingredients
        const steps = req.body.steps
        const photos = req.body.photos
        const notes = req.body.notes
        const tags = req.body.tags

        const recipeResponse = await RecipesDAO.addRecipe(
            userId,
            date,
            name,
            serves,
            cookTime,
            ingredients,
            steps,
            photos,
            notes,
            tags
        )
        res.json({ status: "success" })
    } catch (e) {
        res.status(500).json({ error: e.message })
    }

    static async apiEditRecipe(req, res, next) {
        try {
            /* need to check id later on */
            const recipeId = req.body.recipe_id
            const userId = req.body.user_id
            const name = req.body.name
            const serves = req.body.serves
            const cookTime = req.body.cook_time
            const ingredients = req.body.ingredients
            const steps = req.body.steps
            const photos = req.body.photos
            const notes = req.body.notes
            const tags = req.body.tags

            const recipeResponse = await RecipesDAO.editRecipe(
                recipeId,
                userId,
                name,
                serves,
                cookTime,
                ingredients,
                steps,
                photos,
                notes,
                tags
            )

            var { error } = recipeResponse
            if (error) {
                res.status(400).json({ error: error.message })
            }
            
            if (recipeResponse.modifiedCount === 0) {
                /* Recipe not updated */
                throw new Error(
                    "Unable to update the recipe. User may not be the original poster."
                )
            }
        } catch (e) {
            res.status(500).json({ error: e.message })
        }
    }

    static async apiDeleteRecipe(req, res, next) {
        try {
            const recipeId = req.body.recipe_id
            const userId = req.body.user_id
            console.log(recipeId + " wants to be deleted by \"" + userId + "\"")
            const recipeResponse = await RecipesDAO.deleteRecipe(
                recipeId,
                userId
            )
            res.json({ status: "success" })
        } catch (e) {
            res.status(500).json({ error: e.message })
        }
    }
} 